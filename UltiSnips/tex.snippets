global !p
def math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment():
    return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
    [x,y] = vim.eval("vimtex#env#is_inside('" + name + "')")
    return x != '0' and x != '0'
endglobal

snippet " "quotes"
<<$0>>
endsnippet

snippet beg "begin{} / end{}" b
\begin{$1}
	$0
\end{$1} 
endsnippet

snippet eq "begin{equation}" b
\begin{equation}\label{$1}
	$0
\end{equation} 
endsnippet

snippet fr "begin{frame}" b
\begin{frame}{$1}
$0
\end{frame} 
endsnippet

snippet vbeg "begin{} / end{}" b
\begin{$1}
	${VISUAL}$0
\end{$1}
endsnippet

snippet ьл "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in ['\"', ',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in ['\"', ',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
	$1
\] $0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet __ "subscript" iA
_{$1}$0
endsnippet

context "math()"
snippet td "superscript" iA
^{$1}$0
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

context "math()"
priority 1000
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet /v "Fraction" iA
\\frac{${VISUAL}}{$1}$0
endsnippet

snippet sympy "sympy block " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`
endsnippet

context "math()"
priority 10
snippet "vec" "bar" riA
\vec{$1}$0
endsnippet

context "math()"
priority 100
snippet "([a-zA-Z])vec" "bar" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
priority 10
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

context "math()"
priority 100
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
priority 10
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

context "math()"
priority 100
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

snippet <= "lower or equal slant" A
\le
endsnippet

snippet >= "greater or equal slant" A
\ge
endsnippet

context "math()"
snippet . "" i
\cdot
endsnippet

snippet ... "ldots" iA
\ldots 
endsnippet

context "math()"
snippet 8 "infinity" i
\infty
endsnippet

context "math()"
priority 100
snippet { "left-right {}" i
\left\\{ $1 \right\
endsnippet

context "math()"
priority 100
snippet ( "left-right ()" i
\left( $1 \right
endsnippet

context "math()"
priority 100
snippet [ "left-right []" i
\left[ $1 \right
endsnippet

context "math()"
snippet | "| |" i
\lvert $1 \rvert $0
endsnippet

context "math()"
snippet sum "sum from to" i
\sum\limits_{$1}^{$2} $0
endsnippet

context "math()"
snippet prod "prod from to" i
\prod\limits_{$1}^{$2} $0
endsnippet

context "math()"
snippet lim "limit" i
\lim\limits_{$1} $0
endsnippet

context "math()"
snippet <- "leftarrow" iA
\leftarrow$0
endsnippet

context "math()"
snippet -> "rightarrow" iA
\rightarrow$0
endsnippet

context "math()"
snippet \rightarrow "xrightarrow" 
\xrightarrow[${1:down}]{${2:up}} $0
endsnippet

context "math()"
snippet => "implies" A
\implies $0
endsnippet

context "math()"
snippet int "integral" i
\int\limits_{$1}^{$2} $0
endsnippet

snippet st "change style of selected"
\\$0{${VISUAL}}
endsnippet

snippet fig "include figure" b
\begin{figure}[H]
    \centering
    \includegraphics[width=\textwidth]{$1}
    \caption{$2}
    \label{fig:$3}
\end{figure}
$0
endsnippet
